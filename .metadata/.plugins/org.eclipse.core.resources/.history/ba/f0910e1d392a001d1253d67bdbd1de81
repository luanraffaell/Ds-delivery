package com.devsuperior.dsdeliver.controllers.exceptions;

import java.time.LocalDateTime;
import java.util.stream.Collectors;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.devsuperior.dsdeliver.entities.exceptions.BusinessException;
import com.devsuperior.dsdeliver.entities.exceptions.OrderNotFoundException;
import com.devsuperior.dsdeliver.entities.exceptions.ProductNotFoundException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;

@ControllerAdvice
public class ApiExceptionHandler extends ResponseEntityExceptionHandler {
	
	@Override
	protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) {
		Throwable rootCause = ex.getRootCause();
		if(rootCause instanceof InvalidFormatException) {
			return handleInvalidFormatException((InvalidFormatException)rootCause, headers, status, request);
		}else {
		return handleExceptionInternal(ex, rootCause, headers, status, request);
		}
		
	}
	
	private ResponseEntity<Object> handleInvalidFormatException(InvalidFormatException ex,HttpHeaders headers, HttpStatus status, WebRequest request){
		ProblemType problemType = ProblemType.INCOMPREHENSIBLE_MESSAGE;
		String path = ex.getPath().stream().map(x -> x.getFieldName()).filter(x -> x != null).collect(Collectors.joining("."));
		String details = String.format("Property '%s' has been given the value '%s', which is of an invalid type. "
				+"Correct and enter a value compatible with type '%s'", path,ex.getValue(), ex.getTargetType().getSimpleName());
		Problem problem = createProblemBuilder(status, problemType, details).build();
		return handleExceptionInternal(ex, problem, headers, status, request);
	}
	@ExceptionHandler({ProductNotFoundException.class,OrderNotFoundException.class})
	public ResponseEntity<?> handleOrderProductNotFoundException(Exception ex, WebRequest request){
		HttpStatus status = HttpStatus.NOT_FOUND;
		ProblemType problenType = ProblemType.RESOURCE_NOT_FOUND;
		Problem problem = createProblemBuilder(status, problenType, ex.getMessage()).build();
		if(ex instanceof ProductNotFoundException ) {
		return handleExceptionInternal((ProductNotFoundException)ex, problem, new HttpHeaders(), status, request);
		}
		return handleExceptionInternal((OrderNotFoundException)ex, problem, new HttpHeaders(), status, request);
	}
	@ExceptionHandler(BusinessException.class)
	public ResponseEntity<?> handleBusinessException(BusinessException ex, WebRequest request){
		HttpStatus status = HttpStatus.BAD_REQUEST;
		ProblemType problenType = ProblemType.BUSINESS_ERROR;
		Problem problem = createProblemBuilder(status, problenType, ex.getMessage()).build();
		return handleExceptionInternal(ex, problem, new HttpHeaders(), status, request);
	}
	
	@Override
	protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers,
			HttpStatus status, WebRequest request) {
		if(body == null) {
			body = Problem.builder().title(status.getReasonPhrase()).status(status.value()).build();
		} else if(body instanceof String) {
			body = Problem.builder().title((String)body).status(status.value()).build();
		}
		return super.handleExceptionInternal(ex, body, headers, status, request);
	}
	
	private Problem.ProblemBuilder createProblemBuilder(HttpStatus status,ProblemType problem,String details){
		return Problem.builder().status(status.value())
				.detail(details)
				.timeStamp(LocalDateTime.now())
				.title(problem.getTitle())
				.type(problem.getUri());
	}
}
