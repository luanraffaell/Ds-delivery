package com.devsuperior.dsdeliver.service;

import java.time.Instant;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.devsuperior.dsdeliver.dto.OrderDTO;
import com.devsuperior.dsdeliver.dto.ProductDTO;
import com.devsuperior.dsdeliver.entities.Order;
import com.devsuperior.dsdeliver.entities.OrderStatus;
import com.devsuperior.dsdeliver.entities.Product;
import com.devsuperior.dsdeliver.entities.exceptions.OrderNotFoundException;
import com.devsuperior.dsdeliver.entities.exceptions.ProductNotFoundException;
import com.devsuperior.dsdeliver.repositories.OrderRepository;
import com.devsuperior.dsdeliver.repositories.ProductRepository;

@Service
public class OrderService {
	private OrderRepository orderRepository;
	private ProductRepository productRepository;
	
	public OrderService(OrderRepository orderRepository,ProductRepository productRepository) {
		this.orderRepository = orderRepository;
		this.productRepository = productRepository;
	}
	public OrderDTO findById(Long id) {
		return new OrderDTO(orderRepository.findById(id).orElseThrow(() ->  new OrderNotFoundException(String.format("There is no order with id:%d, please try again", id))));
	}
	
	@Transactional(readOnly =true)
	public List<OrderDTO> findAll(){
		List<Order> list = orderRepository.findOrdersWithProducts();
		return list.stream().map(x -> new OrderDTO(x)).collect(Collectors.toList());
	}
	
	public OrderDTO insert(OrderDTO dto){
		Order order = new Order(null,dto.getAddress(),dto.getLatitude(),dto.getLongitude(),Instant.now(),OrderStatus.PENDING);
		for(ProductDTO p : dto.getProducts()) {
			ProductDTO product = findProduct(p.getId());
				order.getProducts().add(new Product(product.getId(), product.getName(), product.getPrice(), product.getDescription(), product.getDescription()));
		}
		return new OrderDTO(orderRepository.save(order));

	}
	@Transactional
	public OrderDTO setDelivered(Long id) {
		Order order = orderRepository.findById(id).orElseThrow(() -> new OrderNotFoundException("There is no order with id:"+id));
		order.setStatus(OrderStatus.DELIVERED);
		orderRepository.save(order);
		return new OrderDTO(order);
	}
	
	private ProductDTO findProduct(Long id) {
		return new ProductDTO (productRepository.findById(id).orElseThrow(() -> new ProductNotFoundException("There is no product with the id:"+id)));
	}
}
